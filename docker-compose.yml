services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - local-kafka

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
    networks:
      - local-kafka

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - DYNAMIC_CONFIG_ENABLED="true"
    depends_on:
      - kafka
      - zookeeper
    stdin_open: true
    tty: true
    networks:
      - local-kafka

  # auth-service:
  #   build: ./auth # Dockerfile for the auth service
  #   container_name: auth_service
  #   ports:
  #     - "3002:3002"

  # user-service:
  #   build: ./user # Dockerfile for the user service
  #   container_name: user_service
  #   depends_on:
  #     - user_postgres
  #     - user_mongo
  #   environment:
  #     - POSTGRES_HOST=user_postgres
  #     - POSTGRES_DB=user_write_db
  #     - POSTGRES_USER=youruser
  #     - POSTGRES_PASSWORD=yourpassword
  #     - MONGO_HOST=user_mongo
  #     - MONGO_DB=user_read_db
  #   ports:
  #     - "3001:3001"

  # user_mongo:
  #   image: mongo:5
  #   container_name: user_mongo
  #   environment:
  #     MONGO_INITDB_DATABASE: user_read_db
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - user_mongo_data:/data/db

  # user_postgres:
  #   image: postgres:13
  #   container_name: user_postgres
  #   environment:
  #     POSTGRES_DB: user_write_db
  #     POSTGRES_USER: youruser
  #     POSTGRES_PASSWORD: yourpassword
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - user_postgres_data:/var/lib/postgresql/data

  todo-service:
    build: ./todo # Dockerfile for the todo service
    container_name: todo_service
    depends_on:
      - todo_postgres
      - todo_mongo
      - eventstore
      - redis
    environment:
      - POSTGRES_HOST=todo_postgres
      - POSTGRES_DB=todo_write_db
      - POSTGRES_USER=youruser
      - POSTGRES_PASSWORD=yourpassword
      - MONGO_HOST=todo_mongo
      - MONGO_DB=todo_read_db
    ports:
      - "3003:3003"

  todo_postgres:
    image: postgres:13
    container_name: todo_postgres
    environment:
      POSTGRES_DB: todo_write_db
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5434:5432"
    volumes:
      - todo_postgres_data:/var/lib/postgresql/data

  todo_mongo:
    image: mongo:4.2.5
    container_name: todo_mongo
    environment:
      MONGO_INITDB_DATABASE: todo_read_db
    ports:
      - "27019:27017"
    volumes:
      - todo_mongo_data:/data/db

  eventstore:
    image: eventstore/eventstore:22.10.3-buster-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=redis-password
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]

volumes:
  user_postgres_data:
  todo_postgres_data:
  user_mongo_data:
  todo_mongo_data:
  eventstore-volume-data:
  eventstore-volume-logs:
  redis-data:

networks:
  local-kafka:
    driver: bridge
